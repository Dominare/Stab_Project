ARM GAS  /tmp/ccjI0Uqg.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_TIM_PeriodElapsedCallback
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	HAL_TIM_PeriodElapsedCallback:
  25              	.LVL0:
  26              	.LFB42:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/main.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/main.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                             www.st.com/SLA0044
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "adc.h"
  23:Core/Src/main.c **** #include "tim.h"
  24:Core/Src/main.c **** #include "usart.h"
  25:Core/Src/main.c **** #include "gpio.h"
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END Includes */
  31:Core/Src/main.c **** 
ARM GAS  /tmp/ccjI0Uqg.s 			page 2


  32:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PTD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PD */
  39:Core/Src/main.c **** /* USER CODE END PD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  42:Core/Src/main.c **** /* USER CODE BEGIN PM */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* USER CODE END PM */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE BEGIN PV */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE END PV */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  53:Core/Src/main.c **** void SystemClock_Config(void);
  54:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* USER CODE END PFP */
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  59:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* USER CODE END 0 */
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /**
  64:Core/Src/main.c ****   * @brief  The application entry point.
  65:Core/Src/main.c ****   * @retval int
  66:Core/Src/main.c ****   */
  67:Core/Src/main.c **** int main(void)
  68:Core/Src/main.c **** {
  69:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  70:Core/Src/main.c **** 
  71:Core/Src/main.c ****   /* USER CODE END 1 */
  72:Core/Src/main.c **** 
  73:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  74:Core/Src/main.c **** 
  75:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  76:Core/Src/main.c ****   HAL_Init();
  77:Core/Src/main.c **** 
  78:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c ****   /* USER CODE END Init */
  81:Core/Src/main.c **** 
  82:Core/Src/main.c ****   /* Configure the system clock */
  83:Core/Src/main.c ****   SystemClock_Config();
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* USER CODE END SysInit */
  88:Core/Src/main.c **** 
ARM GAS  /tmp/ccjI0Uqg.s 			page 3


  89:Core/Src/main.c ****   /* Initialize all configured peripherals */
  90:Core/Src/main.c ****   MX_GPIO_Init();
  91:Core/Src/main.c ****   MX_ADC_Init();
  92:Core/Src/main.c ****   MX_TIM3_Init();
  93:Core/Src/main.c ****   MX_USART1_UART_Init();
  94:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* USER CODE END 2 */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****   /* Infinite loop */
  99:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 100:Core/Src/main.c ****   uint8_t data[3]={0,0,0};
 101:Core/Src/main.c ****   while (1)
 102:Core/Src/main.c ****   {
 103:Core/Src/main.c ****     HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 104:Core/Src/main.c ****     HAL_UART_Receive(&huart1,data,3,1000);
 105:Core/Src/main.c ****     HAL_UART_Transmit(&huart1, data,3,100);
 106:Core/Src/main.c ****     HAL_Delay(100);
 107:Core/Src/main.c ****     /* USER CODE END WHILE */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 110:Core/Src/main.c ****   }
 111:Core/Src/main.c ****   /* USER CODE END 3 */
 112:Core/Src/main.c **** }
 113:Core/Src/main.c **** 
 114:Core/Src/main.c **** /**
 115:Core/Src/main.c ****   * @brief System Clock Configuration
 116:Core/Src/main.c ****   * @retval None
 117:Core/Src/main.c ****   */
 118:Core/Src/main.c **** void SystemClock_Config(void)
 119:Core/Src/main.c **** {
 120:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 121:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 122:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 125:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 126:Core/Src/main.c ****   */
 127:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 128:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 129:Core/Src/main.c ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 130:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 131:Core/Src/main.c ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 132:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 133:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 134:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 135:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 136:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 137:Core/Src/main.c ****   {
 138:Core/Src/main.c ****     Error_Handler();
 139:Core/Src/main.c ****   }
 140:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 141:Core/Src/main.c ****   */
 142:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 143:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 144:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 145:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
ARM GAS  /tmp/ccjI0Uqg.s 			page 4


 146:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 147:Core/Src/main.c **** 
 148:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 149:Core/Src/main.c ****   {
 150:Core/Src/main.c ****     Error_Handler();
 151:Core/Src/main.c ****   }
 152:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 153:Core/Src/main.c ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 154:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 155:Core/Src/main.c ****   {
 156:Core/Src/main.c ****     Error_Handler();
 157:Core/Src/main.c ****   }
 158:Core/Src/main.c **** }
 159:Core/Src/main.c **** 
 160:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 161:Core/Src/main.c **** 
 162:Core/Src/main.c **** /* USER CODE END 4 */
 163:Core/Src/main.c **** 
 164:Core/Src/main.c **** /**
 165:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 166:Core/Src/main.c ****   * @note   This function is called  when TIM1 interrupt took place, inside
 167:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 168:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 169:Core/Src/main.c ****   * @param  htim : TIM handle
 170:Core/Src/main.c ****   * @retval None
 171:Core/Src/main.c ****   */
 172:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 173:Core/Src/main.c **** {
  28              		.loc 1 173 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 173 1 is_stmt 0 view .LVU1
  33 0000 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
 174:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 177:Core/Src/main.c ****   if (htim->Instance == TIM1) {
  38              		.loc 1 177 3 is_stmt 1 view .LVU2
  39              		.loc 1 177 11 is_stmt 0 view .LVU3
  40 0002 0268     		ldr	r2, [r0]
  41              		.loc 1 177 6 view .LVU4
  42 0004 034B     		ldr	r3, .L4
  43 0006 9A42     		cmp	r2, r3
  44 0008 00D0     		beq	.L3
  45              	.LVL1:
  46              	.L1:
 178:Core/Src/main.c ****     HAL_IncTick();
 179:Core/Src/main.c ****   }
 180:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 183:Core/Src/main.c **** }
ARM GAS  /tmp/ccjI0Uqg.s 			page 5


  47              		.loc 1 183 1 view .LVU5
  48              		@ sp needed
  49 000a 10BD     		pop	{r4, pc}
  50              	.LVL2:
  51              	.L3:
 178:Core/Src/main.c ****     HAL_IncTick();
  52              		.loc 1 178 5 is_stmt 1 view .LVU6
  53 000c FFF7FEFF 		bl	HAL_IncTick
  54              	.LVL3:
  55              		.loc 1 183 1 is_stmt 0 view .LVU7
  56 0010 FBE7     		b	.L1
  57              	.L5:
  58 0012 C046     		.align	2
  59              	.L4:
  60 0014 002C0140 		.word	1073818624
  61              		.cfi_endproc
  62              	.LFE42:
  64              		.section	.text.Error_Handler,"ax",%progbits
  65              		.align	1
  66              		.global	Error_Handler
  67              		.syntax unified
  68              		.code	16
  69              		.thumb_func
  70              		.fpu softvfp
  72              	Error_Handler:
  73              	.LFB43:
 184:Core/Src/main.c **** 
 185:Core/Src/main.c **** /**
 186:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 187:Core/Src/main.c ****   * @retval None
 188:Core/Src/main.c ****   */
 189:Core/Src/main.c **** void Error_Handler(void)
 190:Core/Src/main.c **** {
  74              		.loc 1 190 1 is_stmt 1 view -0
  75              		.cfi_startproc
  76              		@ Volatile: function does not return.
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              		@ link register save eliminated.
 191:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 192:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 193:Core/Src/main.c ****   __disable_irq();
  80              		.loc 1 193 3 view .LVU9
  81              	.LBB4:
  82              	.LBI4:
  83              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  /tmp/ccjI0Uqg.s 			page 6


  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
ARM GAS  /tmp/ccjI0Uqg.s 			page 7


  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
ARM GAS  /tmp/ccjI0Uqg.s 			page 8


 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
  84              		.loc 2 140 27 view .LVU10
  85              	.LBB5:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  86              		.loc 2 142 3 view .LVU11
  87              		.syntax divided
  88              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  89 0000 72B6     		cpsid i
  90              	@ 0 "" 2
  91              		.thumb
  92              		.syntax unified
  93              	.L7:
  94              	.LBE5:
  95              	.LBE4:
 194:Core/Src/main.c ****   while (1)
  96              		.loc 1 194 3 discriminator 1 view .LVU12
 195:Core/Src/main.c ****   {
 196:Core/Src/main.c ****   }
  97              		.loc 1 196 3 discriminator 1 view .LVU13
 194:Core/Src/main.c ****   while (1)
  98              		.loc 1 194 9 discriminator 1 view .LVU14
  99 0002 FEE7     		b	.L7
 100              		.cfi_endproc
 101              	.LFE43:
 103              		.section	.text.SystemClock_Config,"ax",%progbits
 104              		.align	1
 105              		.global	SystemClock_Config
 106              		.syntax unified
 107              		.code	16
 108              		.thumb_func
 109              		.fpu softvfp
 111              	SystemClock_Config:
 112              	.LFB41:
 119:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 113              		.loc 1 119 1 view -0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 80
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117 0000 10B5     		push	{r4, lr}
 118              	.LCFI1:
 119              		.cfi_def_cfa_offset 8
 120              		.cfi_offset 4, -8
ARM GAS  /tmp/ccjI0Uqg.s 			page 9


 121              		.cfi_offset 14, -4
 122 0002 94B0     		sub	sp, sp, #80
 123              	.LCFI2:
 124              		.cfi_def_cfa_offset 88
 120:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 125              		.loc 1 120 3 view .LVU16
 120:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 126              		.loc 1 120 22 is_stmt 0 view .LVU17
 127 0004 1C22     		movs	r2, #28
 128 0006 0021     		movs	r1, #0
 129 0008 09A8     		add	r0, sp, #36
 130 000a FFF7FEFF 		bl	memset
 131              	.LVL4:
 121:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 132              		.loc 1 121 3 is_stmt 1 view .LVU18
 121:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 133              		.loc 1 121 22 is_stmt 0 view .LVU19
 134 000e 1024     		movs	r4, #16
 135 0010 1022     		movs	r2, #16
 136 0012 0021     		movs	r1, #0
 137 0014 04A8     		add	r0, sp, #16
 138 0016 FFF7FEFF 		bl	memset
 139              	.LVL5:
 122:Core/Src/main.c **** 
 140              		.loc 1 122 3 is_stmt 1 view .LVU20
 122:Core/Src/main.c **** 
 141              		.loc 1 122 28 is_stmt 0 view .LVU21
 142 001a 1022     		movs	r2, #16
 143 001c 0021     		movs	r1, #0
 144 001e 6846     		mov	r0, sp
 145 0020 FFF7FEFF 		bl	memset
 146              	.LVL6:
 127:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 147              		.loc 1 127 3 is_stmt 1 view .LVU22
 127:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 148              		.loc 1 127 36 is_stmt 0 view .LVU23
 149 0024 1223     		movs	r3, #18
 150 0026 0893     		str	r3, [sp, #32]
 128:Core/Src/main.c ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 151              		.loc 1 128 3 is_stmt 1 view .LVU24
 128:Core/Src/main.c ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 152              		.loc 1 128 30 is_stmt 0 view .LVU25
 153 0028 113B     		subs	r3, r3, #17
 154 002a 0B93     		str	r3, [sp, #44]
 129:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 155              		.loc 1 129 3 is_stmt 1 view .LVU26
 129:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 156              		.loc 1 129 32 is_stmt 0 view .LVU27
 157 002c 0D93     		str	r3, [sp, #52]
 130:Core/Src/main.c ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 158              		.loc 1 130 3 is_stmt 1 view .LVU28
 130:Core/Src/main.c ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 159              		.loc 1 130 41 is_stmt 0 view .LVU29
 160 002e 0C94     		str	r4, [sp, #48]
 131:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 161              		.loc 1 131 3 is_stmt 1 view .LVU30
 131:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
ARM GAS  /tmp/ccjI0Uqg.s 			page 10


 162              		.loc 1 131 43 is_stmt 0 view .LVU31
 163 0030 0E94     		str	r4, [sp, #56]
 132:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 164              		.loc 1 132 3 is_stmt 1 view .LVU32
 132:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 165              		.loc 1 132 34 is_stmt 0 view .LVU33
 166 0032 0133     		adds	r3, r3, #1
 167 0034 1093     		str	r3, [sp, #64]
 133:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 168              		.loc 1 133 3 is_stmt 1 view .LVU34
 133:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 169              		.loc 1 133 35 is_stmt 0 view .LVU35
 170 0036 0023     		movs	r3, #0
 171 0038 1193     		str	r3, [sp, #68]
 134:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 172              		.loc 1 134 3 is_stmt 1 view .LVU36
 134:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 173              		.loc 1 134 32 is_stmt 0 view .LVU37
 174 003a C022     		movs	r2, #192
 175 003c 5203     		lsls	r2, r2, #13
 176 003e 1292     		str	r2, [sp, #72]
 135:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 177              		.loc 1 135 3 is_stmt 1 view .LVU38
 135:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 178              		.loc 1 135 32 is_stmt 0 view .LVU39
 179 0040 1393     		str	r3, [sp, #76]
 136:Core/Src/main.c ****   {
 180              		.loc 1 136 3 is_stmt 1 view .LVU40
 136:Core/Src/main.c ****   {
 181              		.loc 1 136 7 is_stmt 0 view .LVU41
 182 0042 08A8     		add	r0, sp, #32
 183 0044 FFF7FEFF 		bl	HAL_RCC_OscConfig
 184              	.LVL7:
 136:Core/Src/main.c ****   {
 185              		.loc 1 136 6 view .LVU42
 186 0048 0028     		cmp	r0, #0
 187 004a 17D1     		bne	.L12
 142:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 188              		.loc 1 142 3 is_stmt 1 view .LVU43
 142:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 189              		.loc 1 142 31 is_stmt 0 view .LVU44
 190 004c 0723     		movs	r3, #7
 191 004e 0493     		str	r3, [sp, #16]
 144:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 192              		.loc 1 144 3 is_stmt 1 view .LVU45
 144:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 193              		.loc 1 144 34 is_stmt 0 view .LVU46
 194 0050 053B     		subs	r3, r3, #5
 195 0052 0593     		str	r3, [sp, #20]
 145:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 196              		.loc 1 145 3 is_stmt 1 view .LVU47
 145:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 197              		.loc 1 145 35 is_stmt 0 view .LVU48
 198 0054 0023     		movs	r3, #0
 199 0056 0693     		str	r3, [sp, #24]
 146:Core/Src/main.c **** 
 200              		.loc 1 146 3 is_stmt 1 view .LVU49
ARM GAS  /tmp/ccjI0Uqg.s 			page 11


 146:Core/Src/main.c **** 
 201              		.loc 1 146 36 is_stmt 0 view .LVU50
 202 0058 0793     		str	r3, [sp, #28]
 148:Core/Src/main.c ****   {
 203              		.loc 1 148 3 is_stmt 1 view .LVU51
 148:Core/Src/main.c ****   {
 204              		.loc 1 148 7 is_stmt 0 view .LVU52
 205 005a 0121     		movs	r1, #1
 206 005c 04A8     		add	r0, sp, #16
 207 005e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 208              	.LVL8:
 148:Core/Src/main.c ****   {
 209              		.loc 1 148 6 view .LVU53
 210 0062 0028     		cmp	r0, #0
 211 0064 0CD1     		bne	.L13
 152:Core/Src/main.c ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 212              		.loc 1 152 3 is_stmt 1 view .LVU54
 152:Core/Src/main.c ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 213              		.loc 1 152 38 is_stmt 0 view .LVU55
 214 0066 0123     		movs	r3, #1
 215 0068 0093     		str	r3, [sp]
 153:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 216              		.loc 1 153 3 is_stmt 1 view .LVU56
 153:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 217              		.loc 1 153 38 is_stmt 0 view .LVU57
 218 006a 0023     		movs	r3, #0
 219 006c 0293     		str	r3, [sp, #8]
 154:Core/Src/main.c ****   {
 220              		.loc 1 154 3 is_stmt 1 view .LVU58
 154:Core/Src/main.c ****   {
 221              		.loc 1 154 7 is_stmt 0 view .LVU59
 222 006e 6846     		mov	r0, sp
 223 0070 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 224              	.LVL9:
 154:Core/Src/main.c ****   {
 225              		.loc 1 154 6 view .LVU60
 226 0074 0028     		cmp	r0, #0
 227 0076 05D1     		bne	.L14
 158:Core/Src/main.c **** 
 228              		.loc 1 158 1 view .LVU61
 229 0078 14B0     		add	sp, sp, #80
 230              		@ sp needed
 231 007a 10BD     		pop	{r4, pc}
 232              	.L12:
 138:Core/Src/main.c ****   }
 233              		.loc 1 138 5 is_stmt 1 view .LVU62
 234 007c FFF7FEFF 		bl	Error_Handler
 235              	.LVL10:
 236              	.L13:
 150:Core/Src/main.c ****   }
 237              		.loc 1 150 5 view .LVU63
 238 0080 FFF7FEFF 		bl	Error_Handler
 239              	.LVL11:
 240              	.L14:
 156:Core/Src/main.c ****   }
 241              		.loc 1 156 5 view .LVU64
 242 0084 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/ccjI0Uqg.s 			page 12


 243              	.LVL12:
 244              		.cfi_endproc
 245              	.LFE41:
 247              		.section	.text.main,"ax",%progbits
 248              		.align	1
 249              		.global	main
 250              		.syntax unified
 251              		.code	16
 252              		.thumb_func
 253              		.fpu softvfp
 255              	main:
 256              	.LFB40:
  68:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 257              		.loc 1 68 1 view -0
 258              		.cfi_startproc
 259              		@ Volatile: function does not return.
 260              		@ args = 0, pretend = 0, frame = 8
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262 0000 10B5     		push	{r4, lr}
 263              	.LCFI3:
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 4, -8
 266              		.cfi_offset 14, -4
 267 0002 82B0     		sub	sp, sp, #8
 268              	.LCFI4:
 269              		.cfi_def_cfa_offset 16
  76:Core/Src/main.c **** 
 270              		.loc 1 76 3 view .LVU66
 271 0004 FFF7FEFF 		bl	HAL_Init
 272              	.LVL13:
  83:Core/Src/main.c **** 
 273              		.loc 1 83 3 view .LVU67
 274 0008 FFF7FEFF 		bl	SystemClock_Config
 275              	.LVL14:
  90:Core/Src/main.c ****   MX_ADC_Init();
 276              		.loc 1 90 3 view .LVU68
 277 000c FFF7FEFF 		bl	MX_GPIO_Init
 278              	.LVL15:
  91:Core/Src/main.c ****   MX_TIM3_Init();
 279              		.loc 1 91 3 view .LVU69
 280 0010 FFF7FEFF 		bl	MX_ADC_Init
 281              	.LVL16:
  92:Core/Src/main.c ****   MX_USART1_UART_Init();
 282              		.loc 1 92 3 view .LVU70
 283 0014 FFF7FEFF 		bl	MX_TIM3_Init
 284              	.LVL17:
  93:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 285              		.loc 1 93 3 view .LVU71
 286 0018 FFF7FEFF 		bl	MX_USART1_UART_Init
 287              	.LVL18:
 100:Core/Src/main.c ****   while (1)
 288              		.loc 1 100 3 view .LVU72
 100:Core/Src/main.c ****   while (1)
 289              		.loc 1 100 11 is_stmt 0 view .LVU73
 290 001c 01AB     		add	r3, sp, #4
 291 001e 0D4A     		ldr	r2, .L17
 292 0020 1188     		ldrh	r1, [r2]
ARM GAS  /tmp/ccjI0Uqg.s 			page 13


 293 0022 1980     		strh	r1, [r3]
 294 0024 9278     		ldrb	r2, [r2, #2]
 295 0026 9A70     		strb	r2, [r3, #2]
 296              	.L16:
 101:Core/Src/main.c ****   {
 297              		.loc 1 101 3 is_stmt 1 discriminator 1 view .LVU74
 103:Core/Src/main.c ****     HAL_UART_Receive(&huart1,data,3,1000);
 298              		.loc 1 103 5 discriminator 1 view .LVU75
 299 0028 0221     		movs	r1, #2
 300 002a 0B48     		ldr	r0, .L17+4
 301 002c FFF7FEFF 		bl	HAL_GPIO_TogglePin
 302              	.LVL19:
 104:Core/Src/main.c ****     HAL_UART_Transmit(&huart1, data,3,100);
 303              		.loc 1 104 5 discriminator 1 view .LVU76
 304 0030 FA23     		movs	r3, #250
 305 0032 0A4C     		ldr	r4, .L17+8
 306 0034 9B00     		lsls	r3, r3, #2
 307 0036 0322     		movs	r2, #3
 308 0038 01A9     		add	r1, sp, #4
 309 003a 2000     		movs	r0, r4
 310 003c FFF7FEFF 		bl	HAL_UART_Receive
 311              	.LVL20:
 105:Core/Src/main.c ****     HAL_Delay(100);
 312              		.loc 1 105 5 discriminator 1 view .LVU77
 313 0040 6423     		movs	r3, #100
 314 0042 0322     		movs	r2, #3
 315 0044 01A9     		add	r1, sp, #4
 316 0046 2000     		movs	r0, r4
 317 0048 FFF7FEFF 		bl	HAL_UART_Transmit
 318              	.LVL21:
 106:Core/Src/main.c ****     /* USER CODE END WHILE */
 319              		.loc 1 106 5 discriminator 1 view .LVU78
 320 004c 6420     		movs	r0, #100
 321 004e FFF7FEFF 		bl	HAL_Delay
 322              	.LVL22:
 101:Core/Src/main.c ****   {
 323              		.loc 1 101 9 discriminator 1 view .LVU79
 324 0052 E9E7     		b	.L16
 325              	.L18:
 326              		.align	2
 327              	.L17:
 328 0054 00000000 		.word	.LANCHOR0
 329 0058 00040048 		.word	1207960576
 330 005c 00000000 		.word	huart1
 331              		.cfi_endproc
 332              	.LFE40:
 334              		.section	.rodata
 335              		.align	2
 336              		.set	.LANCHOR0,. + 0
 337              	.LC0:
 338 0000 000000   		.ascii	"\000\000\000"
 339              		.text
 340              	.Letext0:
 341              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 342              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 343              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f030x6.h"
 344              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
ARM GAS  /tmp/ccjI0Uqg.s 			page 14


 345              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 346              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 347              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 348              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 349              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 350              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 351              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_uart.h"
 352              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 353              		.file 15 "Core/Inc/adc.h"
 354              		.file 16 "Core/Inc/tim.h"
 355              		.file 17 "Core/Inc/usart.h"
 356              		.file 18 "Core/Inc/gpio.h"
 357              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 358              		.file 20 "<built-in>"
ARM GAS  /tmp/ccjI0Uqg.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccjI0Uqg.s:16     .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccjI0Uqg.s:24     .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccjI0Uqg.s:60     .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
     /tmp/ccjI0Uqg.s:65     .text.Error_Handler:0000000000000000 $t
     /tmp/ccjI0Uqg.s:72     .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccjI0Uqg.s:104    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccjI0Uqg.s:111    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccjI0Uqg.s:248    .text.main:0000000000000000 $t
     /tmp/ccjI0Uqg.s:255    .text.main:0000000000000000 main
     /tmp/ccjI0Uqg.s:328    .text.main:0000000000000054 $d
     /tmp/ccjI0Uqg.s:335    .rodata:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_IncTick
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_GPIO_Init
MX_ADC_Init
MX_TIM3_Init
MX_USART1_UART_Init
HAL_GPIO_TogglePin
HAL_UART_Receive
HAL_UART_Transmit
HAL_Delay
huart1
